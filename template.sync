#!/bin/bash

subj_id=SUBJECTID
ses_id=SESID
data_dir=DATADIR
data_bucket_in=BUCKET_IN
data_bucket_out=BUCKET_OUT
run_dir=RUNDIR
cpu_usage=8

# pull down needed data and files from BIDS bucket
if [ ! -d ${data_dir}/sub-${subj_id}/ses-${ses_id} ]; then
	mkdir -p ${data_dir}/sub-${subj_id}
	s3cmd get ${data_bucket_in}/sorted/sub-${subj_id}/ses-${ses_id} ${data_dir}/sub-${subj_id} --recursive -v
fi


#push inputs to new s3 bucket
s3cmd sync -F --recursive -v ${data_dir}/sub-${subj_id}/ses-${ses_id}/ ${data_bucket_out}/sub-${subj_id}/ses-${ses_id}/
#s3cmd sync -F --recursive -c ~/.s3cfg-INDI -v ${data_dir}/sub-${subj_id}/ses-${ses_id}/ ${data_bucket_out}/sub-${subj_id}/ses-${ses_id}/

# Checks for verification
# check exit code - should be 0
if [ $? -ne 0 ]; then
    echo "s3cmd sync encountered an error."
else
    echo "s3cmd sync completed successfully."
fi

# use checksum 
## MAKE SURE TO UPDATE THESE PATHS SO THEY CONTAIN PROPER SUBFOLDERS 
s3cmd ls --list-md5 ${data_bucket_in}/sub-${subj_id}/ses-${ses_id}/ --recursive > ${data_dir}/source_md5.txt
s3cmd ls --list-md5 ${data_bucket_out}/sub-${subj_id}/ses-${ses_id}/ --recursive > ${data_dir}/dest_md5.txt

diff ${data_dir}/source_md5.txt ${data_dir}/dest_md5.txt > ${data_dir}/md5_diff.txt
if [ -s md5_diff.txt ]; then
    echo "There are differences between the source and destination files:"
    cat md5_diff.txt
else
    echo "All files match."
fi




## Deleted from above before sync command by Luci:
## Probably don't need this part: 
# if [ ! -e ${data_dir}/dataset_description.json ]; then
# 	cp ${run_dir}/dataset_description.json ${data_dir}
# fi
# if [ ! -e ${data_dir}/participants.tsv ]; then
# 	s3cmd get ${data_bucket_in}/sorted/participants.tsv ${data_dir} -v 
# fi

#remove .nii.gz files
#rm -r ${data_dir}/sub-${subj_id}/ses-${ses_id}/*/*.nii.gz